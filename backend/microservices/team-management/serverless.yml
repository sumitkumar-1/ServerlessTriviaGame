service: team-management
frameworkVersion: '3'

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    SNS_TOPIC_ARN: 'arn:aws:sns:us-east-1:377747625142:team-notification-topic'
    SQS_ARN: 'arn:aws:sqs:us-east-1:377747625142:team-notification-queue'
    REGION: us-east-1
    OPENAI_API_KEY: myapikeyvalue
  iam:
    role: arn:aws:iam::377747625142:role/LabRole

functions:
  createTeam:
    handler: functions/createTeam.main
    events:
      - http:
          path: /api/teams
          method: POST
  getTeamById:
    handler: functions/getTeamById.main
    events:
      - http:
          path: /api/teams/get/{teamId}
          method: GET
  getAllTeams:
    handler: functions/getAllTeams.main
    events:
      - http:
          path: /api/teams
          method: GET
  deleteTeamById:
    handler: functions/deleteTeamById.main
    events:
      - http:
          path: /api/teams/delete/{id}
          method: DELETE
  generateTeamName:
    handler: functions/generateTeamName.main
    events:
      - http:
          path: /api/teams/generate/teamName
          method: GET
  sendTeamInvite:
    handler: functions/sendTeamInvite.main
    events:
      - http:
          path: /api/teams/sendinvites/{teamId}/
          method: POST
  acceptTeamInvite:
    handler: functions/acceptTeamInvite.main
    events:
      - http:
          path: /api/teams/acceptinvites/{teamId}/{memberId}
          method: GET
  rejectTeamInvite:
    handler: functions/rejectTeamInvite.main
    events:
      - http:
          path: /api/teams/rejectinvites/{teamId}/{memberId}
          method: GET
  deleteTeamMember:
    handler: functions/deleteTeamMember.main
    events:
      - http:
          path: /api/teams/deletemembers/{teamId}/{memberId}
          method: DELETE
  updateTeamMember:
    handler: functions/updateTeamMember.main
    events:
      - http:
          path: /api/teams/updatemembers/{teamId}/{memberId}
          method: POST
  updateTeamStat:
    handler: functions/updateTeamStat.main
    events:
      - http:
          path: /api/teams/updatestats/{teamId}
          method: POST
  getTeamStats:
    handler: functions/getTeamStats.main
    events:
      - http:
          path: /api/teams/getstats/{teamId}
          method: GET
  subscribeTeamEmailNotification:
    handler: functions/subscribeTeamEmailNotification.main
    events:
      - http:
          path: /api/teams/subscribenotification
          method: POST
  unsubscribeTeamEmailNotification:
    handler: functions/unsubscribeTeamEmailNotification.main
    events:
      - http:
          path: /api/teams/unsubscribenotification
          method: POST
  teamEmailNotification:
    handler: functions/sendEmail.main
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-1:377747625142:team-notification-queue
    environment:
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 443
      SMTP_SECURE: true
      SMTP_USERNAME: username
      SMTP_PASSWORD: password

resources:
  Resources:
    TeamNotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: team-notification-topic
        DisplayName: Trivia Notification

    TeamNotificationQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: team-notification-queue

    TeamNotificationSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        TopicArn: !Ref TeamNotificationTopic
        Endpoint: !GetAtt TeamNotificationQueue.Arn
